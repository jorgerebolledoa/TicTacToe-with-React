{"ast":null,"code":"var _jsxFileName = \"/workspace/ta-te-ti/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport './App.css';\nimport Board from './components/Board/Board';\nimport ScoreBoard from './components/ScoreBoard/ScoreBoard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst winningPositions = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\nconst App = () => {\n  _s();\n\n  const [turn, setTurn] = useState('X');\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [winningSquares, setWinningSquares] = useState([]);\n  const [score, setScore] = useState({\n    X: 0,\n    O: 0\n  });\n\n  const reset = () => {\n    setTurn('X');\n    setSquares(Array(9).fill(null));\n    setWinningSquares([]);\n  };\n\n  const checkForWinner = newSquares => {\n    for (let i = 0; i < winningPositions.length; i++) {\n      const [a, b, c] = winningPositions[i];\n\n      if (newSquares[a] && newSquares[a] === newSquares[b] && newSquares[a] === newSquares[c]) {\n        endGame(newSquares[a], winningPositions[i]);\n        return;\n      }\n    }\n\n    if (!newSquares.includes(null)) {\n      endGame(null, Array.from(Array(10).keys()));\n      return;\n    }\n\n    setTurn(turn === 'X' ? 'O' : 'X');\n  };\n\n  const handleClick = square => {\n    let newSquares = [...squares];\n    newSquares.splice(square, 1, turn);\n    setSquares(newSquares);\n    checkForWinner(newSquares);\n  };\n\n  const endGame = (result, winningPositions) => {\n    setTurn(null);\n\n    if (result !== null) {\n      setScore({ ...score,\n        [result]: score[result] + 1\n      });\n    }\n\n    setWinningSquares(winningPositions);\n    setTimeout(reset, 2000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      winningSquares: winningSquares,\n      turn: turn,\n      squares: squares,\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n      scoreO: score.O,\n      scoreX: score.X\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eYPj/c2SVNWDz9Hm2i6N9dQt2JU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/workspace/ta-te-ti/src/App.js"],"names":["useState","Board","ScoreBoard","winningPositions","App","turn","setTurn","squares","setSquares","Array","fill","winningSquares","setWinningSquares","score","setScore","X","O","reset","checkForWinner","newSquares","i","length","a","b","c","endGame","includes","from","keys","handleClick","square","splice","result","setTimeout"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport Board from './components/Board/Board';\nimport ScoreBoard from './components/ScoreBoard/ScoreBoard';\n\nconst winningPositions = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\n\nconst App = () => {\n\n  const [turn, setTurn] = useState('X');\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [winningSquares, setWinningSquares] = useState([]);\n  const [score, setScore] = useState({\n    X: 0,\n    O: 0,\n  });\n\n  const reset = () => {\n    setTurn('X');\n    setSquares(Array(9).fill(null));\n    setWinningSquares([]);\n  }\n\n  const checkForWinner = newSquares => {\n    for(let i = 0; i < winningPositions.length; i++) {\n      const [a,b,c] = winningPositions[i];\n      if(newSquares[a] && newSquares[a] === newSquares[b] && newSquares[a] === newSquares[c]) {\n        endGame(newSquares[a], winningPositions[i]);\n        return\n      }\n    }\n\n    if(!newSquares.includes(null)) {\n      endGame(null, Array.from(Array(10).keys()));\n      return\n    }\n    setTurn(turn === 'X' ? 'O' : 'X');\n  }\n\n  const handleClick = square => {\n    let newSquares = [...squares];\n    newSquares.splice(square, 1, turn);\n    setSquares(newSquares);\n    checkForWinner(newSquares);\n  }\n\n  const endGame = (result, winningPositions) => {\n    setTurn(null);\n    if(result !== null) {\n      setScore({\n        ...score,\n        [result]: score[result] + 1,\n      })\n    }\n    setWinningSquares(winningPositions);\n    setTimeout(reset, 2000);\n  }\n\n  return (\n    <div className=\"container\">\n      <Board winningSquares={winningSquares} turn={turn} squares={squares} onClick={handleClick}/>\n      <ScoreBoard scoreO={score.O} scoreX={score.X} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}